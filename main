#!/usr/bin/env python3
"""
LLMAuditTrail - CLI Interface
Command-line interface for LLMAuditTrail cryptographic audit framework.
Author: David Hassoun
Copyright (c) 2025 David Hassoun
"""
import argparse
import sys
import json
from pathlib import Path
from llmaudittrail import AuditTracer
def main():
"""Main CLI entry point."""
parser = argparse.ArgumentParser(
description="LLMAuditTrail - Cryptographic audit framework for LLM agents",
epilog="Author: David Hassoun | Version: 0.1.0"
)
parser.add_argument(
"--demo-basic",
action="store_true",
help="Run basic demonstration"
)
parser.add_argument(
"--demo-medical",
action="store_true",
help="Run medical compliance demonstration"
)
parser.add_argument(
"--verify",
type=str,
help="Verify integrity of audit trail database"
)
parser.add_argument(
"--export",
type=str,
help="Export compliance report from audit trail database"
)
parser.add_argument(
"--test",
action="store_true",
help="Run basic functionality tests"
)
args = parser.parse_args()
if args.demo_basic:
run_basic_demo()
elif args.demo_medical:
run_medical_demo()
elif args.verify:
verify_audit_trail(args.verify)
elif args.export:
export_compliance_report(args.export)
elif args.test:
run_tests()
else:
parser.print_help()
def run_basic_demo():
"""Run basic demonstration."""
print("LLMAuditTrail Basic Demo")
print("Author: David Hassoun")
print("-" * 40)
# Initialize tracer
tracer = AuditTracer(
session_id="demo_basic",
compliance_mode="general"
)
# Simulate audit session
with tracer.audit_session():
# Log some demo events
tracer.log_event("demo_start", {"demo_type": "basic"})
tracer.log_event("demo_action", {"action": "simulate_llm_call"})
tracer.log_event("demo_end", {"demo_type": "basic"})
# Verify integrity
is_valid, details = tracer.verify_integrity()
print(f"Integrity verification: {'PASSED' if is_valid else 'FAILED'}")
print(f"Total events: {details['total_events']}")
print(f"Merkle root: {details['merkle_root'][:16]}...")
def run_medical_demo():
"""Run medical compliance demonstration."""
print("LLMAuditTrail Medical Compliance Demo")
print("Author: David Hassoun")
print("-" * 40)
# Initialize tracer with medical compliance
tracer = AuditTracer(
session_id="demo_medical",
compliance_mode="medical",
retention_years=7
)
# Simulate medical AI session
with tracer.audit_session():
# Simulate patient data analysis
tracer.log_event("patient_data_access", {
"patient_id": "anonymous",
"data_type": "symptoms",
"access_authorized": True
})
tracer.log_event("ai_analysis", {
"analysis_type": "symptom_assessment",
"confidence_score": 0.85,
"recommendations": "further_testing"
})
tracer.log_event("medical_decision", {
"decision_type": "diagnostic_suggestion",
"human_oversight": True,
"compliance_verified": True
})
# Export compliance report
report = tracer.export_compliance_report()
print(f"FDA Compliance: {report['compliance_metadata']['compliance_certified']}")
print(f"Retention period: {report['compliance_metadata']['retention_years']} years")
print(f"Audit trail complete: {report['compliance_metadata']['audit_trail_complete']}")
def verify_audit_trail(db_path: str):
"""Verify integrity of existing audit trail."""
if not Path(db_path).exists():
print(f"Error: Database file {db_path} not found")
return
print(f"Verifying audit trail: {db_path}")
print("Author: David Hassoun")
print("-" * 40)
# TODO: Implement database loading logic
print("Verification feature will be implemented in v0.2")
def export_compliance_report(db_path: str):
"""Export compliance report from audit trail."""
if not Path(db_path).exists():
print(f"Error: Database file {db_path} not found")
return
print(f"Exporting compliance report from: {db_path}")
print("Author: David Hassoun")
print("-" * 40)
# TODO: Implement report export logic
print("Export feature will be implemented in v0.2")
def run_tests():
"""Run basic functionality tests."""
print("LLMAuditTrail Test Suite")
print("Author: David Hassoun")
print("-" * 40)
tests_passed = 0
total_tests = 3
# Test 1: Basic initialization
try:
tracer = AuditTracer()
print("✓ Test 1: Basic initialization - PASSED")
tests_passed += 1
except Exception as e:
print(f"✗ Test 1: Basic initialization - FAILED ({e})")
# Test 2: Event logging
try:
tracer = AuditTracer(session_id="test_session")
event_id = tracer.log_event("test_event", {"test": True})
assert event_id is not None
print("✓ Test 2: Event logging - PASSED")
tests_passed += 1
except Exception as e:
print(f"✗ Test 2: Event logging - FAILED ({e})")
# Test 3: Integrity verification
try:
tracer = AuditTracer(session_id="test_integrity")
tracer.log_event("test_event", {"integrity": "test"})
is_valid, _ = tracer.verify_integrity()
assert is_valid
print("✓ Test 3: Integrity verification - PASSED")
tests_passed += 1
except Exception as e:
print(f"✗ Test 3: Integrity verification - FAILED ({e})")
print("-" * 40)
print(f"Test Results: {tests_passed}/{total_tests} tests passed")
if tests_passed == total_tests:
print("All tests passed! ✓")
sys.exit(0)
else:
print("Some tests failed! ✗")
sys.exit(1)
if name == "main":
main()
